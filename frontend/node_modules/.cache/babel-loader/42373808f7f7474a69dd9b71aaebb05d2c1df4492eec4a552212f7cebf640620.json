{"ast":null,"code":"var _jsxFileName = \"/home/nagesh/Desktop/RR6.4/React_Router_v6/frontend/src/App.js\";\n// Challenge / Exercise\n\nimport { createBrowserRouter, RouterProvider } from \"react-router-dom\";\nimport { RootLayout } from \"./pages/RootLayout\";\nimport { EditEventPage } from \"./pages/EditEventPage\";\nimport { eventDetailAction, eventDetailLoader, EventDetailPage } from \"./pages/EventDetailPage\";\nimport { eventsLoader, EventsPage } from \"./pages/EventsPage\";\nimport { HomePage } from \"./pages/HomePage\";\nimport { newEventAction, NewEventPage } from \"./pages/NewEventPage\";\nimport { EventRootLayout } from \"./pages/EventRootLayout\";\nimport { Error } from \"./pages/Error\";\nimport { formAction } from \"./components/EventForm\";\n\n// 1. Add five new (dummy) page components (content can be simple <h1> elements)\n//    - HomePage\n//    - EventsPage\n//    - EventDetailPage\n//    - NewEventPage\n//    - EditEventPage\n// 2. Add routing & route definitions for these five pages\n//    - / => HomePage\n//    - /events => EventsPage\n//    - /events/<some-id> => EventDetailPage\n//    - /events/new => NewEventPage\n//    - /events/<some-id>/edit => EditEventPage\n// 3. Add a root layout that adds the <MainNavigation> component above all page components\n// 4. Add properly working links to the MainNavigation\n// 5. Ensure that the links in MainNavigation receive an \"active\" class when active\n// 6. Output a list of dummy events to the EventsPage\n//    Every list item should include a link to the respective EventDetailPage\n// 7. Output the ID of the selected event on the EventDetailPage\n// BONUS: Add another (nested) layout route that adds the <EventNavigation> component above all /events... page components\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst router = createBrowserRouter([{\n  path: \"/\",\n  element: /*#__PURE__*/_jsxDEV(RootLayout, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 41,\n    columnNumber: 14\n  }, this),\n  errorElement: /*#__PURE__*/_jsxDEV(Error, {}, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 42,\n    columnNumber: 19\n  }, this),\n  children: [{\n    index: true,\n    element: /*#__PURE__*/_jsxDEV(HomePage, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 31\n    }, this)\n  }, {\n    path: \"events\",\n    element: /*#__PURE__*/_jsxDEV(EventRootLayout, {}, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 47,\n      columnNumber: 18\n    }, this),\n    children: [{\n      index: true,\n      element: /*#__PURE__*/_jsxDEV(EventsPage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 51,\n        columnNumber: 22\n      }, this),\n      loader: eventsLoader\n    }, {\n      path: \"new\",\n      element: /*#__PURE__*/_jsxDEV(NewEventPage, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 56,\n        columnNumber: 22\n      }, this),\n      action: formAction\n    }, {\n      id: \"eventDetailId\",\n      path: \":eventId\",\n      loader: eventDetailLoader,\n      // This loader data is available to childern too, remember childern need to use useRouteLoaderData(<id>), where id is \"eventDetailId\"\n      children: [{\n        index: true,\n        element: /*#__PURE__*/_jsxDEV(EventDetailPage, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 66,\n          columnNumber: 26\n        }, this),\n        action: eventDetailAction\n      }, {\n        path: \"edit\",\n        element: /*#__PURE__*/_jsxDEV(EditEventPage, {}, void 0, false, {\n          fileName: _jsxFileName,\n          lineNumber: 69,\n          columnNumber: 40\n        }, this),\n        action: formAction\n      }]\n    }]\n  }]\n}]);\nfunction App() {\n  return /*#__PURE__*/_jsxDEV(RouterProvider, {\n    router: router\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 79,\n    columnNumber: 10\n  }, this);\n}\n_c = App;\nexport default App;\nvar _c;\n$RefreshReg$(_c, \"App\");","map":{"version":3,"names":["createBrowserRouter","RouterProvider","RootLayout","EditEventPage","eventDetailAction","eventDetailLoader","EventDetailPage","eventsLoader","EventsPage","HomePage","newEventAction","NewEventPage","EventRootLayout","Error","formAction","jsxDEV","_jsxDEV","router","path","element","fileName","_jsxFileName","lineNumber","columnNumber","errorElement","children","index","loader","action","id","App","_c","$RefreshReg$"],"sources":["/home/nagesh/Desktop/RR6.4/React_Router_v6/frontend/src/App.js"],"sourcesContent":["// Challenge / Exercise\n\nimport { createBrowserRouter, RouterProvider } from \"react-router-dom\";\nimport { RootLayout } from \"./pages/RootLayout\";\nimport { EditEventPage } from \"./pages/EditEventPage\";\nimport {\n  eventDetailAction,\n  eventDetailLoader,\n  EventDetailPage,\n} from \"./pages/EventDetailPage\";\nimport { eventsLoader, EventsPage } from \"./pages/EventsPage\";\nimport { HomePage } from \"./pages/HomePage\";\nimport { newEventAction, NewEventPage } from \"./pages/NewEventPage\";\nimport { EventRootLayout } from \"./pages/EventRootLayout\";\nimport { Error } from \"./pages/Error\";\nimport { formAction } from \"./components/EventForm\";\n\n// 1. Add five new (dummy) page components (content can be simple <h1> elements)\n//    - HomePage\n//    - EventsPage\n//    - EventDetailPage\n//    - NewEventPage\n//    - EditEventPage\n// 2. Add routing & route definitions for these five pages\n//    - / => HomePage\n//    - /events => EventsPage\n//    - /events/<some-id> => EventDetailPage\n//    - /events/new => NewEventPage\n//    - /events/<some-id>/edit => EditEventPage\n// 3. Add a root layout that adds the <MainNavigation> component above all page components\n// 4. Add properly working links to the MainNavigation\n// 5. Ensure that the links in MainNavigation receive an \"active\" class when active\n// 6. Output a list of dummy events to the EventsPage\n//    Every list item should include a link to the respective EventDetailPage\n// 7. Output the ID of the selected event on the EventDetailPage\n// BONUS: Add another (nested) layout route that adds the <EventNavigation> component above all /events... page components\n\nconst router = createBrowserRouter([\n  {\n    path: \"/\",\n    element: <RootLayout />,\n    errorElement: <Error />,\n    children: [\n      { index: true, element: <HomePage /> },\n      {\n        path: \"events\",\n        element: <EventRootLayout />,\n        children: [\n          {\n            index: true,\n            element: <EventsPage />,\n            loader: eventsLoader,\n          },\n          {\n            path: \"new\",\n            element: <NewEventPage />,\n            action: formAction,\n          },\n          {\n            id: \"eventDetailId\",\n            path: \":eventId\",\n            loader: eventDetailLoader, // This loader data is available to childern too, remember childern need to use useRouteLoaderData(<id>), where id is \"eventDetailId\"\n            children: [\n              {\n                index: true,\n                element: <EventDetailPage />,\n                action: eventDetailAction,\n              },\n              { path: \"edit\", element: <EditEventPage />, action: formAction },\n            ],\n          },\n        ],\n      },\n    ],\n  },\n]);\n\nfunction App() {\n  return <RouterProvider router={router} />;\n}\n\nexport default App;\n"],"mappings":";AAAA;;AAEA,SAASA,mBAAmB,EAAEC,cAAc,QAAQ,kBAAkB;AACtE,SAASC,UAAU,QAAQ,oBAAoB;AAC/C,SAASC,aAAa,QAAQ,uBAAuB;AACrD,SACEC,iBAAiB,EACjBC,iBAAiB,EACjBC,eAAe,QACV,yBAAyB;AAChC,SAASC,YAAY,EAAEC,UAAU,QAAQ,oBAAoB;AAC7D,SAASC,QAAQ,QAAQ,kBAAkB;AAC3C,SAASC,cAAc,EAAEC,YAAY,QAAQ,sBAAsB;AACnE,SAASC,eAAe,QAAQ,yBAAyB;AACzD,SAASC,KAAK,QAAQ,eAAe;AACrC,SAASC,UAAU,QAAQ,wBAAwB;;AAEnD;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AAAA,SAAAC,MAAA,IAAAC,OAAA;AAEA,MAAMC,MAAM,GAAGjB,mBAAmB,CAAC,CACjC;EACEkB,IAAI,EAAE,GAAG;EACTC,OAAO,eAAEH,OAAA,CAACd,UAAU;IAAAkB,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;EACvBC,YAAY,eAAER,OAAA,CAACH,KAAK;IAAAO,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;EACvBE,QAAQ,EAAE,CACR;IAAEC,KAAK,EAAE,IAAI;IAAEP,OAAO,eAAEH,OAAA,CAACP,QAAQ;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE;EAAE,CAAC,EACtC;IACEL,IAAI,EAAE,QAAQ;IACdC,OAAO,eAAEH,OAAA,CAACJ,eAAe;MAAAQ,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAE,CAAC;IAC5BE,QAAQ,EAAE,CACR;MACEC,KAAK,EAAE,IAAI;MACXP,OAAO,eAAEH,OAAA,CAACR,UAAU;QAAAY,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;MACvBI,MAAM,EAAEpB;IACV,CAAC,EACD;MACEW,IAAI,EAAE,KAAK;MACXC,OAAO,eAAEH,OAAA,CAACL,YAAY;QAAAS,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CAAC;MACzBK,MAAM,EAAEd;IACV,CAAC,EACD;MACEe,EAAE,EAAE,eAAe;MACnBX,IAAI,EAAE,UAAU;MAChBS,MAAM,EAAEtB,iBAAiB;MAAE;MAC3BoB,QAAQ,EAAE,CACR;QACEC,KAAK,EAAE,IAAI;QACXP,OAAO,eAAEH,OAAA,CAACV,eAAe;UAAAc,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;QAC5BK,MAAM,EAAExB;MACV,CAAC,EACD;QAAEc,IAAI,EAAE,MAAM;QAAEC,OAAO,eAAEH,OAAA,CAACb,aAAa;UAAAiB,QAAA,EAAAC,YAAA;UAAAC,UAAA;UAAAC,YAAA;QAAA,OAAE,CAAC;QAAEK,MAAM,EAAEd;MAAW,CAAC;IAEpE,CAAC;EAEL,CAAC;AAEL,CAAC,CACF,CAAC;AAEF,SAASgB,GAAGA,CAAA,EAAG;EACb,oBAAOd,OAAA,CAACf,cAAc;IAACgB,MAAM,EAAEA;EAAO;IAAAG,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAC3C;AAACQ,EAAA,GAFQD,GAAG;AAIZ,eAAeA,GAAG;AAAC,IAAAC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}